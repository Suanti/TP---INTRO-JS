// ``Trabajo Pr√°ctico Integrador:  Introducci√≥n a Javascript. 
// estudiante: SUANTI KATALINA BERNAL ORTIZ

// Sistema de Gesti√≥n de Biblioteca
// Introducci√≥n
// El siguiente trabajo pr√°ctico integrador est√° dise√±ado para evaluar tus conocimientos en los fundamentos de JavaScript
//  a trav√©s de la implementaci√≥n de un conjunto de tareas que deben ser resueltas en un solo programa. 
// Aseg√∫rate de aplicar las buenas pr√°cticas y est√°ndares de nomenclatura, adem√°s de seguir las instrucciones dadas.

// Objetivo
// Desarrollar un sistema de gesti√≥n para una biblioteca que permita administrar libros y usuarios, 
// aplicando los conceptos fundamentales de JavaScript vistos en el m√≥dulo.

// Requerimientos

// 1. Estructura de Datos
//  A. Crear un array de objetos llamado libros que contenga al menos 10 libros. 
// Cada libro debe tener las siguientes propiedades: 
// id (n√∫mero)
// t√≠tulo (string), 
// autor (string), 
// a√±o (n√∫mero), 
// g√©nero (string), 
// disponible (booleano).

let libros = [
  {
    id: 184520,
    t√≠tulo: "Los Miserables",
    autor: "Victor Hugo",
    a√±o: 1862,
    g√©nero: "Tragedia",
    disponible: "true"
  },
  {
    id: 395490,
    t√≠tulo: "Un Mundo Feliz",
    autor: "Aldous Huxley",
    a√±o: 1932,
    g√©nero: "ciencia ficci√≥n",
    disponible: "true"
  },
  {
    id: 602530,
    t√≠tulo: "Momo",
    autor: "Michael Ende",
    a√±o: 1973,
    g√©nero: "novela",
    disponible: "false"
  },
  {
    id: 809740,
    t√≠tulo: "Rebeli√≥n en la Granja",
    autor: "George Orwell",
    a√±o: 1945,
    g√©nero: "s√°tira",
    disponible: "true"
  },
  {
    id: 634572,
    t√≠tulo: "La Niebla",
    autor: "Stephen King",
    a√±o: 1980,
    g√©nero: "terror",
    disponible: "false"
  },
  {
    id: 326570,
    t√≠tulo: " Fausto",
    autor: "Johann Wolfgang von Goethe",
    a√±o: 1790,
    g√©nero: "teatro",
    disponible: "false"
  },
  {
    id: 143652,
    t√≠tulo: "Orgullo y Prejuicio",
    autor: "Jane Austen",
    a√±o: 1813,
    g√©nero: "Novela Rosa",
    disponible: "false"
  },
  {
    id: 759374,
    t√≠tulo: "El tren de las 4:50",
    autor: "Agatha Christie",
    a√±o: 1957,
    g√©nero: "misterio",
    disponible: "true"
  },
  {
    id: 609826,
    t√≠tulo: "Alas de sangre",
    autor: "Rebecca Yarros",
    a√±o: 2023,
    g√©nero: "fantas√≠a rom√°ntica",
    disponible: "true"
  },
  {
    id: 182590,
    t√≠tulo: "√Ålgebra de Baldor",
    autor: "Aurelio Baldor",
    a√±o: 1941,
    g√©nero: "matem√°ticas",
    disponible: "false"
  }
];

// B. Crear un array de objetos llamado usuarios con al menos 5 usuarios. Cada usuario debe tener:
// id (n√∫mero)
// nombre (string)
// email (string)
// librosPrestados (array de ids de libros).

let personas = [
  {
    nombre: "Ana",
    edad: 25,
    mail: "anarojas@hotmail.com",
    librosPrestados: [809740, 182590]
  },
  {
    nombre: "Luis",
    edad: 30,
    mail: "luiseduardo@hotmail.com",
    librosPrestados: [634572]
  },
  {
    nombre: "Marta",
    edad: 22,
    mail: "martastuart@gmail.com",
    librosPrestados: [759374, 609826, 184520]
  },
  {
    nombre: "Juana",
    edad: 27,
    mail: "juanawerkel@yahoo.com",
    librosPrestados: [395490, 143652, 809740, 326570]
  },
  {
    nombre: "Jos√©",
    edad: 34,
    mail: "joselucas@gmail.com",
    librosPrestados: [809740, 602530]
  }
];

// 2. Funciones de Gesti√≥n de Libros
// A. Implementar una funci√≥n agregarLibro(id, titulo, autor, anio, genero) que agregue un nuevo libro al array libros.

let agregarlibro = prompt('ingrese el libro a agregar')
function agregarLibro ( id, titulo , autor, a√±o, g√©nero){ libros.push ({id, titulo , autor, a√±o, g√©nero});}

//B.  Crear una funci√≥n buscarLibro(criterio, valor) que permita buscar libros por t√≠tulo, autor o g√©nero utilizando el algoritmo de b√∫squeda lineal. 

let criterio = prompt("Ingrese su criterio de busqueda: t√≠tulo, autor o g√©nero");
let valor = prompt("Ingrese el titulo, autor o g√©nero");

function buscarLibro(criterio, valor) {
  return libros.filter(libro => libro[criterio].toLowerCase().includes(valor.toLowerCase()));
}
let resultados = buscarLibro(criterio, valor);
console.log(resultados);

//C.  Desarrollar una funci√≥n ordenarLibros(criterio) que ordene los libros por t√≠tulo o a√±o utilizando el algoritmo de ordenamiento burbuja (bubble sort) y luego muestre los libros ordenados en la consola.

let criterio2 = prompt("Ingrese su criterio de busqueda: t√≠tulo o a√±o ");
function ordenarLibros(criterio2) {
  for (let i = 0; i < libros.length - 1; i++) {
    for (let j = 0; j < libros.length - 1 - i; j++) {
      if (libros[j][criterio2] > libros[j + 1][criterio2]) {
        // Intercambio de objetos
        let temp = libros[j];
        libros[j] = libros[j + 1];
        libros[j + 1] = temp; } }}

  // Mostrar libros ordenados
  console.log(`Libros ordenados por ${criterio}:`);
  console.log(libros);
}
//A.  Desarrollar una funci√≥n borrarLibro(id) que elimine el libro que se le pase por par√°metro. 
function borrarLibro(id) {
  const index = libros.findIndex(libro => libro.id === id);
  if (index !== -1) {
    libros.splice(index, 1);
  }
}

// 3. Gesti√≥n de Usuarios
// Implementar una funci√≥n registrarUsuario(nombre, email) que agregue un nuevo usuario al array usuarios. 
// A. Registrar un nuevo usuario

function registrarUsuario(id, nombre, email) {
  personas.push({ id, nombre, email, librosPrestados: [] });
}

// B. Mostrar todos los usuarios
function mostrarTodosLosUsuarios() {
  console.log(personas);
}

// C. Buscar un usuario por email
function buscarUsuario(email) {
  return personas.find(usuario => usuario.email === email);
}

// D. Borrar un usuario
function borrarUsuario(email) {
  const index = personas.findIndex(usuario => usuario.email === email);
  if (index !== -1) {
    personas.splice(index, 1);
  }
}

// 4. Sistema de Pr√©stamos

// A. Funci√≥n para prestar un libro a un usuario
function prestarLibro(idLibro, idUsuario) {
  const libro = libros.find(l => l.id === idLibro);
  const usuario = personas.find(u => u.id === idUsuario);

  if (!libro || !usuario) {
    console.log("Libro o usuario no encontrado.");
    return;
  }

  if (libro.disponible === 'false') {
    console.log("El libro no est√° disponible.");
    return;
  }

  libro.disponible = 'false';
  usuario.librosPrestados.push(idLibro);
  console.log(`El libro "${libro.t√≠tulo}" fue prestado a ${usuario.nombre}.`);
}

// B. Funci√≥n para devolver un libro
function devolverLibro(idLibro, idUsuario) {
  const libro = libros.find(l => l.id === idLibro);
  const usuario = personas.find(u => u.id === idUsuario);

  if (!libro || !usuario) {
    console.log("Libro o usuario no encontrado.");
    return;
  }

  const index = usuario.librosPrestados.indexOf(idLibro);
  if (index === -1) {
    console.log("Este usuario no tiene prestado ese libro.");
    return;
  }

  libro.disponible = 'true';
  usuario.librosPrestados.splice(index, 1);
  console.log(`El libro "${libro.t√≠tulo}" fue devuelto por ${usuario.nombre}.`);

// 5. Reportes
function generarReporteLibros() {
  // 1. Cantidad total de libros
  let totalLibros = libros.length;

  // 2. Cantidad de libros prestados (disponible === 'false')
  let librosPrestados = libros.filter(libro => libro.disponible === 'false').length;

  // 3. Cantidad de libros por g√©nero
  let cantidadPorGenero = libros.reduce((acumulador, libro) => {
    let genero = libro.g√©nero;
    if (acumulador[genero]) {
      acumulador[genero]++;
    } else {
      acumulador[genero] = 1;
    }
    return acumulador;
  }, {}); // empieza con un objeto vac√≠o

  // 4. Libro m√°s antiguo
  let libroMasAntiguo = libros.reduce((antiguo, actual) =>
    actual.a√±o < antiguo.a√±o ? actual : antiguo
  );

  // 5. Libro m√°s nuevo
  let libroMasNuevo = libros.reduce((nuevo, actual) =>
    actual.a√±o > nuevo.a√±o ? actual : nuevo
  );

  // Mostrar reporte
  console.log("üìã REPORTE GENERAL:");
  console.log("Total de libros:", totalLibros);
  console.log("Cantidad de libros prestados:", librosPrestados);
  console.log("Cantidad de libros por g√©nero:", cantidadPorGenero);
  console.log("Libro m√°s antiguo:", libroMasAntiguo.t√≠tulo, "-", libroMasAntiguo.a√±o);
  console.log("Libro m√°s nuevo:", libroMasNuevo.t√≠tulo, "-", libroMasNuevo.a√±o);

// 6. Identificaci√≥n Avanzada de libros
// Implementar una funci√≥n librosConPalabrasEnTitulo() que identifique y muestre los t√≠tulos de los libros que contienen m√°s de una palabra. Adem√°s la funci√≥n debe excluir aquellos t√≠tulos que contengan n√∫meros y/o caracteres especiales. Por √∫ltimo mostrar en la consola el array resultante. 

function librosConPalabrasEnTitulo() {
  let resultado = libros.filter(libro => {
    // Eliminar espacios al principio y final
    let titulo = libro.t√≠tulo.trim();

    // Verificamos si contiene m√°s de una palabra
    let palabras = titulo.split(" ");
    if (palabras.length <= 1) return false;

    // Verificamos que no tenga n√∫meros ni caracteres especiales
    let tieneCaracteresInvalidos = /[^a-zA-Z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√±\s]/.test(titulo);
    if (tieneCaracteresInvalidos) return false;

    return true;
  });

  console.log("üìö T√≠tulos v√°lidos con m√°s de una palabra y sin caracteres especiales:");
  resultado.forEach(libro => console.log(libro.t√≠tulo));
}

// 7. C√°lculos Estad√≠sticos
// Desarrollar una funci√≥n calcularEstadisticas() que obtenga informaci√≥n sobre los a√±os de publicaci√≥n de los libros:
// Obtener un array con los a√±os de publicaci√≥n de todos los libros.

function calcularEstadisticas() {
  let a√±os = libros.map(libro => libro.a√±o);

// Calcular el promedio de los a√±os de publicaci√≥n.

let promedio = a√±os.reduce((acum, a√±o) => acum + a√±o, 0) / a√±os.length;

// Encontrar el a√±o de publicaci√≥n m√°s frecuente.

let frecuencia = {};
a√±os.forEach(a√±o => {
  frecuencia[a√±o] = (frecuencia[a√±o] || 0) + 1;
});

let a√±oFrecuente = null;
let maxFrecuencia = 0;
for (let a√±o in frecuencia) {
  if (frecuencia[a√±o] > maxFrecuencia) {
    maxFrecuencia = frecuencia[a√±o];
    a√±oFrecuente = a√±o;
  }
}

// Calcular la diferencia en a√±os entre el libro m√°s antiguo y el m√°s nuevo. Para este punto es recomendable usar el objeto Math()

let a√±oMin = Math.min(...a√±os);
let a√±oMax = Math.max(...a√±os);
let diferencia = a√±oMax - a√±oMin;

console.log("üìä Estad√≠sticas de Publicaci√≥n:");
console.log("A√±os:", a√±os);
console.log("Promedio de publicaci√≥n:", Math.round(promedio));
console.log("A√±o m√°s frecuente:", a√±oFrecuente);
console.log("Diferencia entre el m√°s nuevo y el m√°s antiguo:", diferencia, "a√±os");

// 8. Manejo de Cadenas
// Crear una funci√≥n normalizarDatos() que utilice m√©todos de strings para:

function normalizarDatos() {

// Convertir todos los t√≠tulos a may√∫sculas.

libros.forEach(libro => {
  libro.t√≠tulo = libro.t√≠tulo.toUpperCase();
});

// Eliminar espacios en blanco al inicio y final de los nombres de autores.

libros.forEach(libro => {
  libro.autor = libro.autor.trim();
});

// Formatear los emails de los usuarios a min√∫sculas.

personas.forEach(usuario => {
  usuario.mail = usuario.mail.toLowerCase();
});

console.log("‚úî Datos normalizados correctamente.");
}


// 9. Interfaz de Usuario por Consola
// Implementar una funci√≥n menuPrincipal() que muestre un men√∫ de opciones al usuario y permita interactuar con el sistema utilizando prompt().
// El men√∫ debe incluir opciones para todas las funcionalidades implementadas en el proyecto y utilizar estructuras de control (if, switch, ciclos) para manejar la l√≥gica.
function menuPrincipal() {
  let opcion;

  do {
    opcion = prompt(
      "üìö Men√∫ Principal de la Biblioteca\n" +
      "1. Agregar libro\n" +
      "2. Buscar libro\n" +
      "3. Ordenar libros\n" +
      "4. Borrar libro\n" +
      "5. Registrar usuario\n" +
      "6. Mostrar todos los usuarios\n" +
      "7. Buscar usuario\n" +
      "8. Borrar usuario\n" +
      "9. Prestar libro\n" +
      "10. Devolver libro\n" +
      "11. Generar reporte de libros\n" +
      "12. Libros con palabras v√°lidas en el t√≠tulo\n" +
      "13. Calcular estad√≠sticas\n" +
      "14. Normalizar datos\n" +
      "0. Salir"
    );

    switch(opcion) {
      case "1":
        let id = parseInt(prompt("ID del libro:"));
        let titulo = prompt("T√≠tulo:");
        let autor = prompt("Autor:");
        let a√±o = parseInt(prompt("A√±o:"));
        let genero = prompt("G√©nero:");
        agregarLibro(id, titulo, autor, a√±o, genero);
        break;

      case "2":
        let criterio = prompt("Buscar por: t√≠tulo, autor o g√©nero");
        let valor = prompt("Ingrese valor de b√∫squeda:");
        console.log(buscarLibro(criterio, valor));
        break;

      case "3":
        let criterio2 = prompt("Ordenar por: t√≠tulo o a√±o");
        ordenarLibros(criterio2);
        break;

      case "4":
        let idBorrar = parseInt(prompt("ID del libro a borrar:"));
        borrarLibro(idBorrar);
        break;

      case "5":
        let nombre = prompt("Nombre del usuario:");
        let email = prompt("Email:");
        registrarUsuario(nombre, email);
        break;

      case "6":
        console.log(mostrarTodosLosUsuarios());
        break;

      case "7":
        let emailBuscado = prompt("Ingrese email del usuario:");
        console.log(buscarUsuario(emailBuscado));
        break;

      case "8":
        let nombreBorrar = prompt("Nombre del usuario:");
        let emailBorrar = prompt("Email:");
        borrarUsuario(nombreBorrar, emailBorrar);
        break;

      case "9":
        let idLibroP = parseInt(prompt("ID del libro a prestar:"));
        let idUsuarioP = parseInt(prompt("√çndice del usuario (0-4):")); // usar √≠ndice simple si no hay id
        prestarLibro(idLibroP, idUsuarioP);
        break;

      case "10":
        let idLibroD = parseInt(prompt("ID del libro a devolver:"));
        let idUsuarioD = parseInt(prompt("√çndice del usuario (0-4):"));
        devolverLibro(idLibroD, idUsuarioD);
        break;

      case "11":
        generarReporteLibros();
        break;

      case "12":
        librosConPalabrasEnTitulo();
        break;

      case "13":
        calcularEstadisticas();
        break;

      case "14":
        normalizarDatos();
        break;

      case "0":
        alert("üëã ¬°Gracias por usar el sistema de biblioteca!");
        break;

      default:
        alert("‚ùå Opci√≥n no v√°lida. Intente nuevamente.");
        break;
    }

  } while(opcion !== "0");
}
menuPrincipal();

// 10. Comentando mi c√≥digo
// Se tomar√° como √∫ltimo punto a evaluar la correcta utilizaci√≥n de comentarios explicando paso por paso su c√≥digo. 
// Deber√°n dividir el c√≥digo punto por punto y con una explicaci√≥n corta y simple de que hicieron en cada punto.
